import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# 加载数据
df1 = pd.read_excel("D:/DATA/训练集.xlsx")
df2 = pd.read_excel("D:/DATA/测试集.xlsx")

# 分割特征与标签
X_train = df1.iloc[:, 8:174]  # 特征
y_train = df1.iloc[:, -1]  # 标签

X_test = df2.iloc[:, 8:174]  # 特征
y_test = df2.iloc[:, -1]  # 标签

# 定义SVM模型
svm_model = SVC()

# 定义要搜索的参数网格
param_grid = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'rbf'],
    'gamma': ['scale', 'auto']
}

# 使用网格搜索进行自动调参
grid_search = GridSearchCV(svm_model, param_grid, cv=5)
grid_search.fit(X_train, y_train)

# 输出最佳参数
print("最佳参数:", grid_search.best_params_)

# 使用最佳参数的模型进行预测
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)

# 计算准确率
accuracy = accuracy_score(y_test, y_pred)
print("测试集准确率:", accuracy)

import shap
import numpy as np

K = 50  

# 对训练集数据进行采样
X_train_sampled = shap.sample(X_train, K)  

# 创建SHAP解释器，使用KernelExplainer并传入采样后的背景数据
explainer = shap.KernelExplainer(best_model.predict, X_train_sampled)  

# 计算测试集所有样本的SHAP值
shap_values = explainer.shap_values(X_test)  


import matplotlib.pyplot as plt  # 导入绘图库
# 1. 绘制SHAP summary_plot（展示每个特征的重要性分布情况）
shap.summary_plot(shap_values, X_test)
plt.title("SHAP Summary Plot")
plt.show()

# 2. 绘制SHAP bar_plot（展示特征重要性的平均绝对值排序情况）
shap.bar_plot(shap_values, X_test)
plt.title("SHAP Bar Plot")
plt.show()

# 3. 绘制单个样本的SHAP force_plot（展示单个样本中各特征如何影响预测结果，这里以第一个样本为例）
if len(X_test) > 0:
    shap.force_plot(explainer.expected_value, shap_values[0, :], X_test.iloc[0, :], matplotlib=True)
    plt.title("SHAP Force Plot for Sample 0")
    plt.show()

